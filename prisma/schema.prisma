// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

enum VideoState {
  DRAFT
  UPLOADING
  PROCESSING
  READY
  FAILED
  ABANDONED
}

enum PlaylistVisibility {
  PRIVATE
  UNLISTED
  PUBLIC
}

enum MemberRole {
  OWNER
  COLLABORATOR
  FOLLOWER
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Video {
  id          Int          @id @default(autoincrement())
  userId      Int?
  user User? @relation(fields: [userId], references: [id])
  uid         String?       @unique
  title       String?
  thumbnail   String?
  duration    Float?
  filename    String?
  preview     String?
  recordedAt  DateTime?
  danceStyle  String?
  recordType  String?
  location    String?
  visibility  String?
  rawData     Json?
  state       VideoState   @default(DRAFT)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  dancers VideoDancer[]
}

model Dancer {
  id Int @id @default(autoincrement())
  name String @unique
  gender String @default("male")
  isTeacher Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  videos VideoDancer[]
}

model VideoDancer {
  id Int @id @default(autoincrement())
  videoId Int 
  dancerId Int
  video Video @relation(fields: [videoId], references: [id])
  dancer Dancer @relation(fields: [dancerId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([videoId, dancerId])
}

model StreamSyncState {
  id Int @id @default(autoincrement())
  lastSyncedAt DateTime @default(now())
}

model User {
  id Int @id @default(autoincrement())
  name String
  email String @unique
  encryptedPassword String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  videos Video[]
  thirdPartyAccounts ThirdPartyAccount[]
  playlists Playlist[]
  playlistMembers PlaylistMember[]
}

model ThirdPartyAccount {
  id Int @id @default(autoincrement())
  userId Int
  provider String
  providerId String
  rawData Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerId])
}

model Playlist {
  id Int @id @default(autoincrement())
  publicId String @unique
  title String
  visibility PlaylistVisibility @default(PRIVATE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId Int
  user User @relation(fields: [userId], references: [id])
  members PlaylistMember[]
}

model PlaylistMember {
  id Int @id @default(autoincrement())
  playlistId Int
  userId Int
  role MemberRole @default(FOLLOWER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  playlist Playlist @relation(fields: [playlistId], references: [id])
  user User @relation(fields: [userId], references: [id])
}
